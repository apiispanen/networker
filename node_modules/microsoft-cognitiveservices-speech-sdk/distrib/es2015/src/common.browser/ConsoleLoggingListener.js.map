{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":"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","file":"ConsoleLoggingListener.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\r\nimport { Contracts } from \"../sdk/Contracts\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            switch (event.eventType) {\r\n                case LogLevel.Debug:\r\n                    // eslint-disable-next-line no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case LogLevel.Info:\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(log);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    // eslint-disable-next-line no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case LogLevel.Error:\r\n                    // eslint-disable-next-line no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]}