{"version":3,"sources":["src/common.speech/TranslationConnectionFactory.ts"],"names":[],"mappings":"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","file":"TranslationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport { StringUtils } from \"../common/StringUtils\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n            endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n"]}